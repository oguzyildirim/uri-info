// Code generated by sqlc. DO NOT EDIT.
// source: url.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const deleteURL = `-- name: DeleteURL :one
DELETE FROM urls
WHERE  id = $1 RETURNING id AS res
`

func (q *Queries) DeleteURL(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteURL, id)
	var res uuid.UUID
	err := row.Scan(&res)
	return res, err
}

const insertURL = `-- name: InsertURL :one
INSERT INTO urls (
  HTML_version,
  page_title,
  headings_count,
  links_count,
  inaccessible_links_count,
  have_login_form
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
RETURNING id
`

type InsertURLParams struct {
	Htmlversion            string
	Pagetitle              string
	Headingscount          string
	Linkscount             int32
	Inaccessiblelinkscount int32
	Haveloginform          bool
}

func (q *Queries) InsertURL(ctx context.Context, arg InsertURLParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertURL,
		arg.Htmlversion,
		arg.Pagetitle,
		arg.Headingscount,
		arg.Linkscount,
		arg.Inaccessiblelinkscount,
		arg.Haveloginform,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const selectURL = `-- name: SelectURL :one
SELECT id, html_version, page_title, headings_count, links_count, inaccessible_links_count, have_login_form FROM urls
WHERE id = $1 LIMIT 1
`

func (q *Queries) SelectURL(ctx context.Context, id uuid.UUID) (Urls, error) {
	row := q.db.QueryRowContext(ctx, selectURL, id)
	var i Urls
	err := row.Scan(
		&i.ID,
		&i.HtmlVersion,
		&i.PageTitle,
		&i.HeadingsCount,
		&i.LinksCount,
		&i.InaccessibleLinksCount,
		&i.HaveLoginForm,
	)
	return i, err
}
